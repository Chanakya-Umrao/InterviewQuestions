Singleton Pattern in Spring Boot
Generally, a singleton is globally unique for an application, but in Spring, this constraint is relaxed. Instead,
Spring restricts a singleton to one object per Spring IoC container. In practice, this means Spring will only create
one bean for each type per application context.
Spring's approach differs from the strict definition of a singleton since an application can have more than one Spring
container. Therefore, multiple objects of the same class can exist in a single application if we have multiple containers.

Generally, a singleton is globally unique for an application, but in Spring, this constraint is relaxed. Instead,
Spring restricts a singleton to one object per Spring IoC container. In practice, this means Spring will only create
one bean for each type per application context.

Spring's approach differs from the strict definition of a singleton since an application can have more than one
Spring container. Therefore, multiple objects of the same class can exist in a single application if we have
multiple containers.

For example, we can create two controllers within a single application context and inject a bean of the same type into each.

First, we create a BookRepository that manages our Book domain objects.

Next, we create LibraryController, which uses the BookRepository to return the number of books in the library:

@RestController
public class LibraryController {

    @Autowired
    private BookRepository repository;

    @GetMapping("/count")
    public Long findCount() {
        System.out.println(repository);
        return repository.count();
    }
}
Copy
Lastly, we create a BookController, which focuses on Book-specific actions, such as finding a book by its ID:

@RestController
public class BookController {

    @Autowired
    private BookRepository repository;

    @GetMapping("/book/{id}")
    public Book findById(@PathVariable long id) {
        System.out.println(repository);
        return repository.findById(id).get();
    }
}
Copy
We then start this application and perform a GET on /count and /book/1:

curl -X GET http://localhost:8080/count
curl -X GET http://localhost:8080/book/1
Copy
In the application output, we see that both BookRepository objects have the same object ID:

com.baeldung.spring.patterns.singleton.BookRepository@3ea9524f
com.baeldung.spring.patterns.singleton.BookRepository@3ea9524f
Copy
The BookRepository object IDs in the LibraryController and BookController are the same, proving that Spring
injected the same bean into both controllers.

We can create separate instances of the BookRepository bean by changing the bean scope from singleton to prototype
using the @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) annotation.

Doing so instructs Spring to create separate objects for each of the BookRepository beans it creates.
Therefore, if we inspect the object ID of the BookRepository in each of our controllers again, we see
that they are no longer the same.