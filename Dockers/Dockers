Dockers Notes


What is Docker?
* Docker is an open source containerization platform. It enables developers to package applications into containers. Before it clash in dependencies
could arise but with docker this problem was solved. It also allows us to pull or download entire app and run with very few commands.

What is Container?
* A way to package application with all the necessary dependencies and configurations.
* Portable artifact, means it is easily shareable and can be easily moved around.
* Makes development and deployment efficient.
* Containers are stored at container repositories, repository could be private or public like docker hub.
* Container is a layer of images, meaning when we pull an image(set of images, one defined in another, eg base image alpine 3.0 and
application image postgres) from docker hub container downloads all the images involved in that image.
* Container has ports, it is different from host ports.

What is image?
*A Docker image is a file used to execute code in a Docker container. Docker images act as a set of instructions to build a Docker container,
like a template. An image is comparable to a snapshot in virtual machine (VM) environments.
*Container is a runtime environment for image.

* 	Virtual Machine 							 	VS				Docker

	Virtual Machine													Docker Container
	Hardware-level process isolation						OS level process isolation
	Each VM has a separate 										OS	Each container can share OS
	Boots in minutes													Boots in seconds
	VMs are of few GBs												Containers are lightweight (KBs/MBs)
	Ready-made VMs are difficult to find				Pre-built docker containers are easily available
	VMs can move to new host easily						Containers are destroyed and re-created rather than moving
	Creating VM takes a relatively longer time		Containers can be created in seconds
	More resource usage											Less resource usage

Docker Compose File
* A file used to build a container
* Rather than typing same commands time after time we can simply define all the properties in compose file and then execute it.

Docker File
* Blueprint to build images, in this file we can write properties to define how our image is going to be build and where our image is going to
be stored.

Docker Volumes
* Docker volumes are file systems mounted on Docker containers to preserve data generated by the running container.
** Types
	Named volumes have a specific source from outside the container, for example awesome:/bar .(most commonly used)
	Anonymous volumes have no specific source so when the container is deleted, instruct the Docker Engine daemon to remove them.

Docker Commands

1. docker search
We can use the command docker search to search for public images on the Docker hub. It will return information about the image name, description,
 stars, official and automated.

docker search MySQL

2. docker pull
Now that we know the name of the image, we can pull that from the Docker hub using the command docker pull. Here, we are setting the platform
option as well.

docker pull --platform linux/x86_64 mysql
Tags are used to identify images inside a repository. If we don’t specify a tag Docker engine uses the :latest tag by default. So, in the previous
 example, Docker pulled the mysql:latest image.

If our application depends on a specific version of an image, we can specify that using a tag name.

docker pull --platform linux/arm64/v8 mysql:5.6
Since we can have multiple images under one repository, we can pull all the images using the --all-tags option. The following command will pull all
the images from the mysql repository.

docker pull --all-tags mysql
3. docker images
Brilliant, now we should have some images in our local machine, and to confirm, let’s run the following command to list all the local images.

docker images

docker images
In my case, I have two images that we downloaded in the previous step.

4. docker run
Alright, now that we have some images, we can try to create a container. Here we used the --env option to set a mandatory environment variable
 and --detach option to run the container in the background.

docker run --env MYSQL_ROOT_PASSWORD=my-secret-pw --detach mysql
Moreover, we can use the --name option to assign a name to the container. Docker will randomly assign a name if we don’t provide one.

5. docker ps
We can list all the running containers by using the following command.

docker ps

How about listing all the containers, including stopped once? We can do that by adding --all option.

docker ps --all

6. docker stop
To stop a container, use the docker stop command with either the container id or container name. We may stop a container if we want to change
our docker run command.

docker stop f8c52bedeecc
7. docker restart
Let’s restart our stopped contained by using the following command. We may want to use this after we reboot our machine.

docker restart f8c52bedeecc
8. docker rename
Now, let’s change the container name from compassionate_fermi to test_db. We may want to change the name to keep track of our containers
more easily.

docker rename compassionate_fermi test_db
9. docker exec
Access the running container test_db by running the following command. It’s helpful if we want to access the MySQL command line and
execute MySQL queries.

docker exec -it test_db bash
mysql -uroot -pmy-secret-pw
SHOW DATABASES;
The -i and -t options are used to access the container in an interactive mode. Then we provide the name of the container we want to access,
which in this case test_db. Finally, the bash command is used to get a bash shell inside the container.

10. docker logs
This command is helpful to debug our Docker containers. It will fetch logs from a specified container.

docker logs test_db
If we want to continue to stream new output, we can use the option -follow.

docker logs -follow test_db
11. docker rm
In case we want to remove a container, we can use the following command.

docker rm test_db
You may encounter an error like

Error response from daemon: You cannot remove a running container ……… Stop the container before attempting removal or force remove

As it recommends, we can stop the container first and then remove it or use option -f to remove a running container forcefully.

docker stop test_db
docker rm test_db
# or
docker rm -f test_db
12. docker rmi
Finally, if we want to free some disk space, we can use the docker rmi command with the image id to remove an image.

docker rmi eb0e825dc3cf
