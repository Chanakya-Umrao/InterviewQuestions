CHECKED EXCEPTION: CHECKED EXCEPTIONS ARE THE ONE WHICH ARE CHECKED AT COMPILE-TIME. FOR EXAMPLE, SQLEXCEPTION,
CLASSNOTFOUNDEXCEPTION, ETC. Handled with throws
For example, consider the following Java program that opens the file at location “C:\test\a.txt” and prints the
first three lines of it.The program doesn’t compile, because the function main() uses FileReader() and FileReader()
throws exception FileNotFoundException. It also uses readLine() and close() methods, and these methods
also throw checked exception IOException

UNCHECKED EXCEPTION: UNCHECKED EXCEPTIONS ARE THE ONE WHICH ARE HANDLED AT RUNTIME BECAUSE THEY CAN NOT BE CHECKED
AT COMPILE-TIME. FOR EXAMPLE, ARITHMATICEXCEPTION, NULLPOINTEREXCEPTION, ARRAYINDEXOUTOFBOUNDSEXCEPTION, ETC.

ERROR: ERROR CAUSE THE PROGRAM TO EXIT SINCE THEY ARE NOT RECOVERABLE. FOR EXAMPLE, OUTOFMEMORYERROR, ASSERTIONERROR, ETC.


Exception vs Error

Exception occurs because of program but error occurs because of lack of resources.
Exceptions are recoverable but errors are not.
Exceptions are of compile time and run time also called as checked or unchecked but errors are only of
Exceptions can be handled, errors can not be handled
one type i.e runtime exception




Exception Tree in Java

                                            Object
                                               |
                                            Throwable
                                               |
                             Error                              Exception
                                |
                         Syntax Error, RunTimeError, Logical Error


                        Checked Exceptions = SQLException, IO Exception, Broken Barrier Exception
                        Unchecked Exceptions = Null Pointer Exception, Arithmetic Exception

                        Errors = Virtual Machine Error(Types StackOverflow
                        Out of Memory, Assertion Error, Linkage Error(Class Not Found)
Error class is java.type.lang.error
Throw vs Throws

Throw is used to explicitly throw an exception where as throws is used to declare exception
Checked exception can not be propagated using throw where as it can be via throws.
Throw is used within method whereas throws with the method
You can only throw one exception where as you can use throws to declare more than one exceptions.

Checked Exception
Checked Exceptions
These are the exceptions that are checked at compile time. If some code within a method throws a checked exception,
then the method must either handle the exception or it must specify the exception using the throws keyword.
In checked exception,

Unchecked Exceptions
These are the exceptions that are not checked at compile time.
to throw an exception we simply use throw new IllegalArgumentException(eg)
@ControllerAdvice is a specialized form of the spring's stereotype annotation which allows handling exceptions
across the whole application in one global handling component.
@ExceptionHandler - method level annotation, used to specify the method


Chained exception allows you to relate one exception with another exception
Methods of throwable class which supports chained exception
getCause() - return actual cause
initCause() - sets cause for calling exception

eg BusinessException bE = new BusinessException("Some Error")
bE.initCause(new PermissionDeniedException("Permission Error"))

now when we do exception.getMessage = Some Error will be printed
but when we do exception.getCause = Permission Error will be printed


Very Important Point
All Exceptions occur at run time, compile time exceptions are simply those where compiler expects an exception
can occur

How Process of Exception Occurs

class Main {
public static void main(String[] args) {
int a = 100/0;
}
}

in the above program main will run 100/0 which, with this main will create object of arithmeticException which will have
exception name, description(msg) and stack trace, now jvm will check if main is handling the exception in any way, since in
this case it is not hence main will pass this object to default exception handler which will print the exception and program will
be abnormally terminated.

class Main {
public void ex() {
int a = 100/0;
}
public static void main(String[] args) {
Main m = new Main();
m.ex();
}
}

The difference here from above is that in this ex method will create exception object and jvm will first check method if it handles
the ex and then main and then upon seeing that will pass the exception object to default exception handler which will then print
exception and program will be terminated abnormally

Throw

Throw is used by the programmer to throw an exception in a certain situation, it is advised to always
throw user defined exception

class CustomException extends RuntimeException {
    public CustomException(String message) {
        super(message);
    }
}
public class ThrowException {
    public static void main(String[] args) {
        int age = 17;
        if(age < 18) {
            throw new CustomException("Age is less than 18");
        }
    }
}


above we can see that custom exception is a type of runtime exception, we should only
throw unchecked exception usually, but if we have to throw checked exception then extend only ExceptionClass

Throws is used to identify that the method can throw a checked exception and they are telling the method calling
them should catch this exception

for eg

public class ThrowsTest {
public void throwTest() throws FileNotFoundException {
    FileInputStream fileInputStream = new FileInputStream(new File("notes.txt"));
}
public static void main(String[] args) {
    ThrowsTest throwsTest = new ThrowsTest();
    try {
        throwsTest.throwTest();
    }
    catch (FileNotFoundException e) {
        e.printStackTrace();
    }
}
}

in this throwTest method throws a checked exception so since main is calling it, it should handle this
exception so that our program don't terminate abnormally.

even though we could have written throws with main too, it is not good practice to do so as in that case
jvm would have terminated program abnormally passing the object to default exception handler.