Authentication vs Authorization

Authentication
Authentication is the process of verifying the identity of an individual or entity. It ensures that the claimed identity is
genuine and valid. The primary goal of authentication is to establish trust and confirm that the user is who they claim to
be. Authentication methods typically involve the use of credentials, such as usernames and passwords, biometric data
(e.g., fingerprints or facial recognition), security tokens, or digital certificates. By successfully completing
the authentication process, a user gains access to a system or application.

Authorization
Authorization, on the other hand, is the process of granting or denying access rights and permissions to authenticated users
or entities. Once a user's identity is authenticated, authorization determines what actions or resources that user is
allowed to access or perform. It involves defining and enforcing access control rules based on roles, permissions,
and privileges associated with the authenticated identity. Authorization ensures that authenticated users have the
appropriate level of access to resources, based on their assigned roles or the specific permissions granted to them.

JWT(Json Web Token)
A JWT token consists of three parts: a header, a payload, and a signature. Each part is Base64Url encoded and separated by
dots (.).

Here's a brief overview of the components:

Header: The header typically contains information about the token's signing algorithm and token type. For example, it
may specify that the token is using HMAC SHA256 or RSA as the signing algorithm.

Payload: The payload carries the claims or statements about the authenticated user or other relevant data. Claims can
include information like the user's ID, roles, permissions, expiration time, and other custom attributes. The payload
is not encrypted but rather Base64Url encoded.

Signature: The signature is generated by combining the encoded header, encoded payload, and a secret key known only
to the server. The signature ensures the integrity of the token and verifies that it hasn't been tampered with
during transmission. The signature is used to validate the authenticity of the token upon receiving it.

In Spring token is stored in Authorization header of request. For eg bearer asjfajs, bearer is basically a http
authentication scheme.


When Client authenticates and JWT token is created it can be stored in

Cookies:
The JWT token can be stored in an HTTP-only cookie. This ensures that the token is automatically included in subsequent
requests by the browser, as cookies are sent along with every request to the same domain. Storing the token in an
HTTP-only cookie provides some level of protection against cross-site scripting (XSS) attacks.

Local Storage or Session Storage:
The JWT token can be stored in the client's local storage or session storage, which are storage mechanisms provided
by the web browser. Local storage retains the data even after the browser is closed and reopened, while session
storage is cleared when the browser session ends. However, it's important to note that storing sensitive information
like JWT tokens in client-side storage may expose them to potential security risks, such as cross-site scripting
(XSS) attacks.

HTML5 Web Storage APIs:
The JWT token can be stored in other HTML5 web storage mechanisms, such as IndexedDB or Web SQL Database. These APIs
provide more flexible storage options, but they require explicit code implementation to handle the storage and
retrieval of the token.

When a token is generated in spring boot and a request is made using an api, then the jwt token is stored
as in authorization header.


JWT Token in spring boot project

We will have to first

1.create a configuration class which extends websecurity configurer adapter and add annotation @enable web security
2.A jwt filter class which extends once per request filter.
3.A jwt utility class which implements serializable(This class has all the methods related to getting details of user
from token such as get username from token).
4.A jwt service class used to get details for user such as load user by username.
5.JWT dto class and user class

Working

in configuration class add the configure methods which takes http as parameter and authentication builder manager
the http one is used to redirect all request without token to pages such as login and for other requests apply jwt filter.
In the jwt filter we check whether token is valid or by using jwt util get user detail and by using user service whether that
user exists or not.


in the next configure method authenticationmanagerbuilder we pass the kind of object we are using authentication
for and also create authenticationmanager object and autowire call the method authenticationmanagerbean and
use super to get the actual implementation and it takes above object of authentication manager builder as above
one is overriding actual implementation.

also create a password encoder which will store password in encrypted form in the database.




